`timescale 1ns / 1ps

module DATA_LOGGER_DUAL_TB;
  parameter AXIS_TDATA_WIDTH = 32;
  
  //Master Side
  wire [2*AXIS_TDATA_WIDTH-1:0]  m_axis_S2MM_tdata;
  wire                         m_axis_S2MM_tvalid;
  wire                         m_axis_S2MM_tlast;
  reg                          m_axis_S2MM_tready = 1'b0;              
  
  // Slave side
  wire                        s_axis_CH1_tready;
  reg [AXIS_TDATA_WIDTH-1:0] s_axis_CH1_tdata = 32'b0;
  reg                        s_axis_CH1_tvalid = 1'b0;
  // Slave side
  wire                        s_axis_CH2_tready;
  reg [AXIS_TDATA_WIDTH-1:0] s_axis_CH2_tdata = 32'b0;
  reg                        s_axis_CH2_tvalid = 1'b0;
  //Ports
  reg aclk;
  reg wrclk;
  reg rst;
  wire trigger;
  wire AFULL;
  wire AEMPTY;
DATA_LOGGER #(.DOWN_SAMPLE(5),.N_FIFO(40), .AXIS_TDATA_WIDTH(AXIS_TDATA_WIDTH),.DMA_BUFFER(20000),.DUAL(1)) UUT (.m_axis_S2MM_tdata(m_axis_S2MM_tdata),
.m_axis_S2MM_tvalid(m_axis_S2MM_tvalid),.m_axis_S2MM_tlast(m_axis_S2MM_tlast),.m_axis_S2MM_tready(m_axis_S2MM_tready),
.s_axis_CH1_tready(s_axis_CH1_tready),.s_axis_CH1_tdata(s_axis_CH1_tdata),.s_axis_CH1_tvalid(s_axis_CH1_tvalid),
.s_axis_CH2_tready(s_axis_CH2_tready),.s_axis_CH2_tdata(s_axis_CH2_tdata),.s_axis_CH2_tvalid(s_axis_CH2_tvalid),
.s_axis_aclk(aclk),.m_axis_aclk(wrclk),.rst(rst),.trigger(trigger),.AFULL(AFULL),.AEMPTY(AEMPTY));

reg [31:0] TEST_DATA = 32'b0;
integer s = 0;
integer k = 0;
integer j = 0;
initial
    begin
        rst = 1'b0;
        aclk = 1'b0;
        wrclk = 1'b0;
        for(k = 0; k < 10; k = k+1) begin
            #4 aclk = 1'b1; wrclk = 1'b1;
            #4 aclk = 1'b0; wrclk = 1'b0;
            #4 rst = 1'b1;
            
        end
        rst = 1'b0;
        for(s = 0; s < 10000000; s= s+1 ) begin
            //Simulate incoming data stream
            s_axis_CH1_tvalid <= 1'b1;
            s_axis_CH1_tdata <= TEST_DATA;
            s_axis_CH2_tvalid <= 1'b1;
            s_axis_CH2_tdata <= TEST_DATA;
            
            TEST_DATA <= TEST_DATA + 1; //Increment Sample data
            //Simulate DMA FIFO read, note that client code on PS will initiate DMA read, not PL
            if(trigger) begin
                //#5 reading <= 1'b1;
                m_axis_S2MM_tready <= 1'b1;
                j <= j + 1; 
            end
            else begin
                m_axis_S2MM_tready <= 1'b0;
            end
            if(j>10000) begin 
                //#5 reading <= 1'b0;
                j <= 0;
            end
            #4 aclk <= 1'b1; wrclk <= 1'b1;
            #4 aclk <= 1'b0; wrclk <= 1'b0;
        end
    end

endmodule
